// Generated by gencpp from file slamware_ros_sdk/ArtifactUsage.msg
// DO NOT EDIT!


#ifndef SLAMWARE_ROS_SDK_MESSAGE_ARTIFACTUSAGE_H
#define SLAMWARE_ROS_SDK_MESSAGE_ARTIFACTUSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slamware_ros_sdk
{
template <class ContainerAllocator>
struct ArtifactUsage_
{
  typedef ArtifactUsage_<ContainerAllocator> Type;

  ArtifactUsage_()
    : usage(0)  {
    }
  ArtifactUsage_(const ContainerAllocator& _alloc)
    : usage(0)  {
  (void)_alloc;
    }



   typedef int8_t _usage_type;
  _usage_type usage;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(VIRTUAL_WALL)
  #undef VIRTUAL_WALL
#endif
#if defined(_WIN32) && defined(VIRTUAL_TRACK)
  #undef VIRTUAL_TRACK
#endif

  enum {
    UNKNOWN = -1,
    VIRTUAL_WALL = 0,
    VIRTUAL_TRACK = 1,
  };


  typedef boost::shared_ptr< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> const> ConstPtr;

}; // struct ArtifactUsage_

typedef ::slamware_ros_sdk::ArtifactUsage_<std::allocator<void> > ArtifactUsage;

typedef boost::shared_ptr< ::slamware_ros_sdk::ArtifactUsage > ArtifactUsagePtr;
typedef boost::shared_ptr< ::slamware_ros_sdk::ArtifactUsage const> ArtifactUsageConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator2> & rhs)
{
  return lhs.usage == rhs.usage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slamware_ros_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09a92f9c3f6f43e89519652dba70246f";
  }

  static const char* value(const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09a92f9c3f6f43e8ULL;
  static const uint64_t static_value2 = 0x9519652dba70246fULL;
};

template<class ContainerAllocator>
struct DataType< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slamware_ros_sdk/ArtifactUsage";
  }

  static const char* value(const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int8 UNKNOWN=-1\n"
"int8 VIRTUAL_WALL=0\n"
"int8 VIRTUAL_TRACK=1\n"
"\n"
"int8 usage\n"
;
  }

  static const char* value(const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.usage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArtifactUsage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slamware_ros_sdk::ArtifactUsage_<ContainerAllocator>& v)
  {
    s << indent << "usage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAMWARE_ROS_SDK_MESSAGE_ARTIFACTUSAGE_H
