// Generated by gencpp from file slamware_ros_sdk/SyncSetStcmRequest.msg
// DO NOT EDIT!


#ifndef SLAMWARE_ROS_SDK_MESSAGE_SYNCSETSTCMREQUEST_H
#define SLAMWARE_ROS_SDK_MESSAGE_SYNCSETSTCMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace slamware_ros_sdk
{
template <class ContainerAllocator>
struct SyncSetStcmRequest_
{
  typedef SyncSetStcmRequest_<ContainerAllocator> Type;

  SyncSetStcmRequest_()
    : raw_stcm()
    , robot_pose()  {
    }
  SyncSetStcmRequest_(const ContainerAllocator& _alloc)
    : raw_stcm(_alloc)
    , robot_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _raw_stcm_type;
  _raw_stcm_type raw_stcm;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_pose_type;
  _robot_pose_type robot_pose;





  typedef boost::shared_ptr< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SyncSetStcmRequest_

typedef ::slamware_ros_sdk::SyncSetStcmRequest_<std::allocator<void> > SyncSetStcmRequest;

typedef boost::shared_ptr< ::slamware_ros_sdk::SyncSetStcmRequest > SyncSetStcmRequestPtr;
typedef boost::shared_ptr< ::slamware_ros_sdk::SyncSetStcmRequest const> SyncSetStcmRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator2> & rhs)
{
  return lhs.raw_stcm == rhs.raw_stcm &&
    lhs.robot_pose == rhs.robot_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slamware_ros_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf6e85150212bf18415ddb0faf371f8b";
  }

  static const char* value(const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf6e85150212bf18ULL;
  static const uint64_t static_value2 = 0x415ddb0faf371f8bULL;
};

template<class ContainerAllocator>
struct DataType< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slamware_ros_sdk/SyncSetStcmRequest";
  }

  static const char* value(const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#request\n"
"uint8[] raw_stcm\n"
"geometry_msgs/Pose robot_pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.raw_stcm);
      stream.next(m.robot_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SyncSetStcmRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slamware_ros_sdk::SyncSetStcmRequest_<ContainerAllocator>& v)
  {
    s << indent << "raw_stcm[]" << std::endl;
    for (size_t i = 0; i < v.raw_stcm.size(); ++i)
    {
      s << indent << "  raw_stcm[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.raw_stcm[i]);
    }
    s << indent << "robot_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAMWARE_ROS_SDK_MESSAGE_SYNCSETSTCMREQUEST_H
