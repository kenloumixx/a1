// Generated by gencpp from file slamware_ros_sdk/LocalizationOptions.msg
// DO NOT EDIT!


#ifndef SLAMWARE_ROS_SDK_MESSAGE_LOCALIZATIONOPTIONS_H
#define SLAMWARE_ROS_SDK_MESSAGE_LOCALIZATIONOPTIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <slamware_ros_sdk/OptionalInt32.h>
#include <slamware_ros_sdk/OptionalLocalizationMovement.h>

namespace slamware_ros_sdk
{
template <class ContainerAllocator>
struct LocalizationOptions_
{
  typedef LocalizationOptions_<ContainerAllocator> Type;

  LocalizationOptions_()
    : max_time_ms()
    , mvmt_type()  {
    }
  LocalizationOptions_(const ContainerAllocator& _alloc)
    : max_time_ms(_alloc)
    , mvmt_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::slamware_ros_sdk::OptionalInt32_<ContainerAllocator>  _max_time_ms_type;
  _max_time_ms_type max_time_ms;

   typedef  ::slamware_ros_sdk::OptionalLocalizationMovement_<ContainerAllocator>  _mvmt_type_type;
  _mvmt_type_type mvmt_type;





  typedef boost::shared_ptr< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizationOptions_

typedef ::slamware_ros_sdk::LocalizationOptions_<std::allocator<void> > LocalizationOptions;

typedef boost::shared_ptr< ::slamware_ros_sdk::LocalizationOptions > LocalizationOptionsPtr;
typedef boost::shared_ptr< ::slamware_ros_sdk::LocalizationOptions const> LocalizationOptionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator2> & rhs)
{
  return lhs.max_time_ms == rhs.max_time_ms &&
    lhs.mvmt_type == rhs.mvmt_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slamware_ros_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f22b73404b93416123cd3d791b6768f";
  }

  static const char* value(const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f22b73404b93416ULL;
  static const uint64_t static_value2 = 0x123cd3d791b6768fULL;
};

template<class ContainerAllocator>
struct DataType< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slamware_ros_sdk/LocalizationOptions";
  }

  static const char* value(const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"OptionalInt32 max_time_ms\n"
"OptionalLocalizationMovement mvmt_type\n"
"\n"
"================================================================================\n"
"MSG: slamware_ros_sdk/OptionalInt32\n"
"\n"
"bool is_valid\n"
"int32 value\n"
"\n"
"================================================================================\n"
"MSG: slamware_ros_sdk/OptionalLocalizationMovement\n"
"\n"
"bool is_valid\n"
"LocalizationMovement value\n"
"\n"
"================================================================================\n"
"MSG: slamware_ros_sdk/LocalizationMovement\n"
"\n"
"int8 UNKNOWN=-1\n"
"int8 NO_MOVE=0\n"
"int8 ROTATE_ONLY=1\n"
"int8 ANY=2\n"
"\n"
"int8 type\n"
;
  }

  static const char* value(const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_time_ms);
      stream.next(m.mvmt_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalizationOptions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slamware_ros_sdk::LocalizationOptions_<ContainerAllocator>& v)
  {
    s << indent << "max_time_ms: ";
    s << std::endl;
    Printer< ::slamware_ros_sdk::OptionalInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.max_time_ms);
    s << indent << "mvmt_type: ";
    s << std::endl;
    Printer< ::slamware_ros_sdk::OptionalLocalizationMovement_<ContainerAllocator> >::stream(s, indent + "  ", v.mvmt_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAMWARE_ROS_SDK_MESSAGE_LOCALIZATIONOPTIONS_H
