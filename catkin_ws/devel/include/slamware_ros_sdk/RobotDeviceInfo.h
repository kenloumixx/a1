// Generated by gencpp from file slamware_ros_sdk/RobotDeviceInfo.msg
// DO NOT EDIT!


#ifndef SLAMWARE_ROS_SDK_MESSAGE_ROBOTDEVICEINFO_H
#define SLAMWARE_ROS_SDK_MESSAGE_ROBOTDEVICEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slamware_ros_sdk
{
template <class ContainerAllocator>
struct RobotDeviceInfo_
{
  typedef RobotDeviceInfo_<ContainerAllocator> Type;

  RobotDeviceInfo_()
    : device_id()
    , model_id(0)
    , model_name()
    , manufacturer_id(0)
    , manufacturer_name()
    , hardware_version()
    , software_version()
    , sdp_version()
    , sdk_version()  {
    }
  RobotDeviceInfo_(const ContainerAllocator& _alloc)
    : device_id(_alloc)
    , model_id(0)
    , model_name(_alloc)
    , manufacturer_id(0)
    , manufacturer_name(_alloc)
    , hardware_version(_alloc)
    , software_version(_alloc)
    , sdp_version(_alloc)
    , sdk_version(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_id_type;
  _device_id_type device_id;

   typedef int32_t _model_id_type;
  _model_id_type model_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef int32_t _manufacturer_id_type;
  _manufacturer_id_type manufacturer_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _manufacturer_name_type;
  _manufacturer_name_type manufacturer_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_version_type;
  _hardware_version_type hardware_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _software_version_type;
  _software_version_type software_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sdp_version_type;
  _sdp_version_type sdp_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sdk_version_type;
  _sdk_version_type sdk_version;





  typedef boost::shared_ptr< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotDeviceInfo_

typedef ::slamware_ros_sdk::RobotDeviceInfo_<std::allocator<void> > RobotDeviceInfo;

typedef boost::shared_ptr< ::slamware_ros_sdk::RobotDeviceInfo > RobotDeviceInfoPtr;
typedef boost::shared_ptr< ::slamware_ros_sdk::RobotDeviceInfo const> RobotDeviceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator2> & rhs)
{
  return lhs.device_id == rhs.device_id &&
    lhs.model_id == rhs.model_id &&
    lhs.model_name == rhs.model_name &&
    lhs.manufacturer_id == rhs.manufacturer_id &&
    lhs.manufacturer_name == rhs.manufacturer_name &&
    lhs.hardware_version == rhs.hardware_version &&
    lhs.software_version == rhs.software_version &&
    lhs.sdp_version == rhs.sdp_version &&
    lhs.sdk_version == rhs.sdk_version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator1> & lhs, const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slamware_ros_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "147111817e23218ad3ebe9575ab38f3d";
  }

  static const char* value(const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x147111817e23218aULL;
  static const uint64_t static_value2 = 0xd3ebe9575ab38f3dULL;
};

template<class ContainerAllocator>
struct DataType< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slamware_ros_sdk/RobotDeviceInfo";
  }

  static const char* value(const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string device_id\n"
"int32 model_id\n"
"string model_name\n"
"int32 manufacturer_id\n"
"string manufacturer_name\n"
"string hardware_version\n"
"string software_version\n"
"\n"
"string sdp_version\n"
"string sdk_version\n"
;
  }

  static const char* value(const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.model_id);
      stream.next(m.model_name);
      stream.next(m.manufacturer_id);
      stream.next(m.manufacturer_name);
      stream.next(m.hardware_version);
      stream.next(m.software_version);
      stream.next(m.sdp_version);
      stream.next(m.sdk_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotDeviceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slamware_ros_sdk::RobotDeviceInfo_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device_id);
    s << indent << "model_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.model_id);
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "manufacturer_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.manufacturer_id);
    s << indent << "manufacturer_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.manufacturer_name);
    s << indent << "hardware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_version);
    s << indent << "software_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.software_version);
    s << indent << "sdp_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sdp_version);
    s << indent << "sdk_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sdk_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAMWARE_ROS_SDK_MESSAGE_ROBOTDEVICEINFO_H
