# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slamware_ros_sdk/BasicSensorValueData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import slamware_ros_sdk.msg

class BasicSensorValueData(genpy.Message):
  _md5sum = "ac61252b54363621f1c85905419d34d8"
  _type = "slamware_ros_sdk/BasicSensorValueData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
BasicSensorInfo info
BasicSensorValue value

================================================================================
MSG: slamware_ros_sdk/BasicSensorInfo

int32 id
SensorType sensor_type
ImpactType impact_type
geometry_msgs/Pose install_pose
float32 refresh_freq

================================================================================
MSG: slamware_ros_sdk/SensorType

int8 UNKNOWN=-1
int8 BUMPER=0
int8 CLIFF=1
int8 SONAR=2
int8 DEPTH_CAMERA=3
int8 WALL_SENSOR=4
int8 MAG_TAPE_DETECTOR=5

int8 type

================================================================================
MSG: slamware_ros_sdk/ImpactType

int8 UNKNOWN=-1
int8 DIGITAL=0
int8 ANALOG=1

int8 type

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: slamware_ros_sdk/BasicSensorValue

bool is_in_impact			# whether this sensor is in impact status
float32 value
"""
  __slots__ = ['info','value']
  _slot_types = ['slamware_ros_sdk/BasicSensorInfo','slamware_ros_sdk/BasicSensorValue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       info,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicSensorValueData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.info is None:
        self.info = slamware_ros_sdk.msg.BasicSensorInfo()
      if self.value is None:
        self.value = slamware_ros_sdk.msg.BasicSensorValue()
    else:
      self.info = slamware_ros_sdk.msg.BasicSensorInfo()
      self.value = slamware_ros_sdk.msg.BasicSensorValue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2b7dfBf().pack(_x.info.id, _x.info.sensor_type.type, _x.info.impact_type.type, _x.info.install_pose.position.x, _x.info.install_pose.position.y, _x.info.install_pose.position.z, _x.info.install_pose.orientation.x, _x.info.install_pose.orientation.y, _x.info.install_pose.orientation.z, _x.info.install_pose.orientation.w, _x.info.refresh_freq, _x.value.is_in_impact, _x.value.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.info is None:
        self.info = slamware_ros_sdk.msg.BasicSensorInfo()
      if self.value is None:
        self.value = slamware_ros_sdk.msg.BasicSensorValue()
      end = 0
      _x = self
      start = end
      end += 71
      (_x.info.id, _x.info.sensor_type.type, _x.info.impact_type.type, _x.info.install_pose.position.x, _x.info.install_pose.position.y, _x.info.install_pose.position.z, _x.info.install_pose.orientation.x, _x.info.install_pose.orientation.y, _x.info.install_pose.orientation.z, _x.info.install_pose.orientation.w, _x.info.refresh_freq, _x.value.is_in_impact, _x.value.value,) = _get_struct_i2b7dfBf().unpack(str[start:end])
      self.value.is_in_impact = bool(self.value.is_in_impact)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2b7dfBf().pack(_x.info.id, _x.info.sensor_type.type, _x.info.impact_type.type, _x.info.install_pose.position.x, _x.info.install_pose.position.y, _x.info.install_pose.position.z, _x.info.install_pose.orientation.x, _x.info.install_pose.orientation.y, _x.info.install_pose.orientation.z, _x.info.install_pose.orientation.w, _x.info.refresh_freq, _x.value.is_in_impact, _x.value.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.info is None:
        self.info = slamware_ros_sdk.msg.BasicSensorInfo()
      if self.value is None:
        self.value = slamware_ros_sdk.msg.BasicSensorValue()
      end = 0
      _x = self
      start = end
      end += 71
      (_x.info.id, _x.info.sensor_type.type, _x.info.impact_type.type, _x.info.install_pose.position.x, _x.info.install_pose.position.y, _x.info.install_pose.position.z, _x.info.install_pose.orientation.x, _x.info.install_pose.orientation.y, _x.info.install_pose.orientation.z, _x.info.install_pose.orientation.w, _x.info.refresh_freq, _x.value.is_in_impact, _x.value.value,) = _get_struct_i2b7dfBf().unpack(str[start:end])
      self.value.is_in_impact = bool(self.value.is_in_impact)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2b7dfBf = None
def _get_struct_i2b7dfBf():
    global _struct_i2b7dfBf
    if _struct_i2b7dfBf is None:
        _struct_i2b7dfBf = struct.Struct("<i2b7dfBf")
    return _struct_i2b7dfBf
