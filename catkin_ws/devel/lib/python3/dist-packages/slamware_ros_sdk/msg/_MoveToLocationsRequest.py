# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slamware_ros_sdk/MoveToLocationsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import slamware_ros_sdk.msg

class MoveToLocationsRequest(genpy.Message):
  _md5sum = "6f33f6579602c04837318e79ebcc71bf"
  _type = "slamware_ros_sdk/MoveToLocationsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Point[] locations
MoveOptions options
float32 yaw

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: slamware_ros_sdk/MoveOptions

MoveOptionFlag opt_flags
OptionalFlt64 speed_ratio

================================================================================
MSG: slamware_ros_sdk/MoveOptionFlag

uint32 NONE=0
uint32 APPENDING=1
uint32 MILESTONE=2
uint32 NO_SMOOTH=4
uint32 KEY_POINTS=8
uint32 PRECISE=16
uint32 WITH_YAW=32
uint32 RETURN_UNREACHABLE_DIRECTLY=64
uint32 KEY_POINTS_WITH_OA=128

uint32 flags

================================================================================
MSG: slamware_ros_sdk/OptionalFlt64

bool is_valid
float64 value
"""
  __slots__ = ['locations','options','yaw']
  _slot_types = ['geometry_msgs/Point[]','slamware_ros_sdk/MoveOptions','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       locations,options,yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveToLocationsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.locations is None:
        self.locations = []
      if self.options is None:
        self.options = slamware_ros_sdk.msg.MoveOptions()
      if self.yaw is None:
        self.yaw = 0.
    else:
      self.locations = []
      self.options = slamware_ros_sdk.msg.MoveOptions()
      self.yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.locations:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_IBdf().pack(_x.options.opt_flags.flags, _x.options.speed_ratio.is_valid, _x.options.speed_ratio.value, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.locations is None:
        self.locations = None
      if self.options is None:
        self.options = slamware_ros_sdk.msg.MoveOptions()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.locations = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.locations.append(val1)
      _x = self
      start = end
      end += 17
      (_x.options.opt_flags.flags, _x.options.speed_ratio.is_valid, _x.options.speed_ratio.value, _x.yaw,) = _get_struct_IBdf().unpack(str[start:end])
      self.options.speed_ratio.is_valid = bool(self.options.speed_ratio.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.locations:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_IBdf().pack(_x.options.opt_flags.flags, _x.options.speed_ratio.is_valid, _x.options.speed_ratio.value, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.locations is None:
        self.locations = None
      if self.options is None:
        self.options = slamware_ros_sdk.msg.MoveOptions()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.locations = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.locations.append(val1)
      _x = self
      start = end
      end += 17
      (_x.options.opt_flags.flags, _x.options.speed_ratio.is_valid, _x.options.speed_ratio.value, _x.yaw,) = _get_struct_IBdf().unpack(str[start:end])
      self.options.speed_ratio.is_valid = bool(self.options.speed_ratio.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_IBdf = None
def _get_struct_IBdf():
    global _struct_IBdf
    if _struct_IBdf is None:
        _struct_IBdf = struct.Struct("<IBdf")
    return _struct_IBdf
