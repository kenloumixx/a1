# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slamware_ros_sdk/BasicSensorValueDataArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import slamware_ros_sdk.msg

class BasicSensorValueDataArray(genpy.Message):
  _md5sum = "4f5614e15bb39e1233d6a3c6460058fa"
  _type = "slamware_ros_sdk/BasicSensorValueDataArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
BasicSensorValueData[] values_data

================================================================================
MSG: slamware_ros_sdk/BasicSensorValueData

BasicSensorInfo info
BasicSensorValue value

================================================================================
MSG: slamware_ros_sdk/BasicSensorInfo

int32 id
SensorType sensor_type
ImpactType impact_type
geometry_msgs/Pose install_pose
float32 refresh_freq

================================================================================
MSG: slamware_ros_sdk/SensorType

int8 UNKNOWN=-1
int8 BUMPER=0
int8 CLIFF=1
int8 SONAR=2
int8 DEPTH_CAMERA=3
int8 WALL_SENSOR=4
int8 MAG_TAPE_DETECTOR=5

int8 type

================================================================================
MSG: slamware_ros_sdk/ImpactType

int8 UNKNOWN=-1
int8 DIGITAL=0
int8 ANALOG=1

int8 type

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: slamware_ros_sdk/BasicSensorValue

bool is_in_impact			# whether this sensor is in impact status
float32 value
"""
  __slots__ = ['values_data']
  _slot_types = ['slamware_ros_sdk/BasicSensorValueData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       values_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicSensorValueDataArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.values_data is None:
        self.values_data = []
    else:
      self.values_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.values_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.values_data:
        _v1 = val1.info
        _x = _v1.id
        buff.write(_get_struct_i().pack(_x))
        _v2 = _v1.sensor_type
        _x = _v2.type
        buff.write(_get_struct_b().pack(_x))
        _v3 = _v1.impact_type
        _x = _v3.type
        buff.write(_get_struct_b().pack(_x))
        _v4 = _v1.install_pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v1.refresh_freq
        buff.write(_get_struct_f().pack(_x))
        _v7 = val1.value
        _x = _v7
        buff.write(_get_struct_Bf().pack(_x.is_in_impact, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.values_data is None:
        self.values_data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.values_data = []
      for i in range(0, length):
        val1 = slamware_ros_sdk.msg.BasicSensorValueData()
        _v8 = val1.info
        start = end
        end += 4
        (_v8.id,) = _get_struct_i().unpack(str[start:end])
        _v9 = _v8.sensor_type
        start = end
        end += 1
        (_v9.type,) = _get_struct_b().unpack(str[start:end])
        _v10 = _v8.impact_type
        start = end
        end += 1
        (_v10.type,) = _get_struct_b().unpack(str[start:end])
        _v11 = _v8.install_pose
        _v12 = _v11.position
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v13 = _v11.orientation
        _x = _v13
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (_v8.refresh_freq,) = _get_struct_f().unpack(str[start:end])
        _v14 = val1.value
        _x = _v14
        start = end
        end += 5
        (_x.is_in_impact, _x.value,) = _get_struct_Bf().unpack(str[start:end])
        _v14.is_in_impact = bool(_v14.is_in_impact)
        self.values_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.values_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.values_data:
        _v15 = val1.info
        _x = _v15.id
        buff.write(_get_struct_i().pack(_x))
        _v16 = _v15.sensor_type
        _x = _v16.type
        buff.write(_get_struct_b().pack(_x))
        _v17 = _v15.impact_type
        _x = _v17.type
        buff.write(_get_struct_b().pack(_x))
        _v18 = _v15.install_pose
        _v19 = _v18.position
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = _v18.orientation
        _x = _v20
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v15.refresh_freq
        buff.write(_get_struct_f().pack(_x))
        _v21 = val1.value
        _x = _v21
        buff.write(_get_struct_Bf().pack(_x.is_in_impact, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.values_data is None:
        self.values_data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.values_data = []
      for i in range(0, length):
        val1 = slamware_ros_sdk.msg.BasicSensorValueData()
        _v22 = val1.info
        start = end
        end += 4
        (_v22.id,) = _get_struct_i().unpack(str[start:end])
        _v23 = _v22.sensor_type
        start = end
        end += 1
        (_v23.type,) = _get_struct_b().unpack(str[start:end])
        _v24 = _v22.impact_type
        start = end
        end += 1
        (_v24.type,) = _get_struct_b().unpack(str[start:end])
        _v25 = _v22.install_pose
        _v26 = _v25.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = _v25.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (_v22.refresh_freq,) = _get_struct_f().unpack(str[start:end])
        _v28 = val1.value
        _x = _v28
        start = end
        end += 5
        (_x.is_in_impact, _x.value,) = _get_struct_Bf().unpack(str[start:end])
        _v28.is_in_impact = bool(_v28.is_in_impact)
        self.values_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
