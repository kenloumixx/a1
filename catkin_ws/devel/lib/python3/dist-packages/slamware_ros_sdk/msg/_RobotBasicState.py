# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from slamware_ros_sdk/RobotBasicState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotBasicState(genpy.Message):
  _md5sum = "9be82c50d81e99092b7127a543694749"
  _type = "slamware_ros_sdk/RobotBasicState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
bool is_map_building_enabled
bool is_localization_enabled

int32 localization_quality

int32 board_temperature

int32 battery_percentage
bool is_dc_in
bool is_charging
"""
  __slots__ = ['is_map_building_enabled','is_localization_enabled','localization_quality','board_temperature','battery_percentage','is_dc_in','is_charging']
  _slot_types = ['bool','bool','int32','int32','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_map_building_enabled,is_localization_enabled,localization_quality,board_temperature,battery_percentage,is_dc_in,is_charging

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotBasicState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_map_building_enabled is None:
        self.is_map_building_enabled = False
      if self.is_localization_enabled is None:
        self.is_localization_enabled = False
      if self.localization_quality is None:
        self.localization_quality = 0
      if self.board_temperature is None:
        self.board_temperature = 0
      if self.battery_percentage is None:
        self.battery_percentage = 0
      if self.is_dc_in is None:
        self.is_dc_in = False
      if self.is_charging is None:
        self.is_charging = False
    else:
      self.is_map_building_enabled = False
      self.is_localization_enabled = False
      self.localization_quality = 0
      self.board_temperature = 0
      self.battery_percentage = 0
      self.is_dc_in = False
      self.is_charging = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3i2B().pack(_x.is_map_building_enabled, _x.is_localization_enabled, _x.localization_quality, _x.board_temperature, _x.battery_percentage, _x.is_dc_in, _x.is_charging))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.is_map_building_enabled, _x.is_localization_enabled, _x.localization_quality, _x.board_temperature, _x.battery_percentage, _x.is_dc_in, _x.is_charging,) = _get_struct_2B3i2B().unpack(str[start:end])
      self.is_map_building_enabled = bool(self.is_map_building_enabled)
      self.is_localization_enabled = bool(self.is_localization_enabled)
      self.is_dc_in = bool(self.is_dc_in)
      self.is_charging = bool(self.is_charging)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3i2B().pack(_x.is_map_building_enabled, _x.is_localization_enabled, _x.localization_quality, _x.board_temperature, _x.battery_percentage, _x.is_dc_in, _x.is_charging))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.is_map_building_enabled, _x.is_localization_enabled, _x.localization_quality, _x.board_temperature, _x.battery_percentage, _x.is_dc_in, _x.is_charging,) = _get_struct_2B3i2B().unpack(str[start:end])
      self.is_map_building_enabled = bool(self.is_map_building_enabled)
      self.is_localization_enabled = bool(self.is_localization_enabled)
      self.is_dc_in = bool(self.is_dc_in)
      self.is_charging = bool(self.is_charging)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3i2B = None
def _get_struct_2B3i2B():
    global _struct_2B3i2B
    if _struct_2B3i2B is None:
        _struct_2B3i2B = struct.Struct("<2B3i2B")
    return _struct_2B3i2B
